import {
	ILoadOptionsFunctions,
	INodePropertyOptions,
	INodeType,
	INodeTypeDescription,
	IWebhookFunctions,
	IWebhookResponseData,
	NodeConnectionType,
	NodeOperationError,
} from 'n8n-workflow';

export class FamulorTrigger implements INodeType {
	description: INodeTypeDescription = {
		displayName: 'Famulor Call Ended Trigger',
		name: 'famulorTrigger',
		icon: 'file:famulor.svg',
		group: ['trigger'],
		version: 1,
		subtitle: 'Trigger when a phone call ends',
		description: 'Trigger workflows when an Famulor phone call ends.\n\n**Note:** You must manually register this webhook URL in your Famulor dashboard. Go to your assistant settings in Famulor, add the webhook URL generated by n8n, and save. n8n does not register the webhook automatically.',
		defaults: {
			name: 'Famulor Call Ended Trigger',
		},
		inputs: [],
		outputs: [NodeConnectionType.Main],
		credentials: [
			{
				name: 'famulorApi',
				required: true,
			},
		],
		webhooks: [
			{
				name: 'default',
				httpMethod: 'POST',
				responseMode: 'onReceived',
				path: 'webhook',
			},
		],

		properties: [
			// Hidden fields with default values
			{
				displayName: 'Resource',
				name: 'resource',
				type: 'hidden',
				default: 'call',
			},
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'hidden',
				default: 'callEnded',
			},
			// Main configuration field
			{
				displayName: 'Assistant Name or ID',
				name: 'assistantId',
				type: 'options',
				typeOptions: {
					loadOptionsMethod: 'getAssistants',
				},
				default: '',
				required: true,
				description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code/expressions/">expression</a>',
			},
		],
	};

	methods = {
		loadOptions: {
			async getAssistants(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {
				const credentials = await this.getCredentials('famulorApi');

				try {
					// Helper function for retry logic with rate limiting
					const makeRequestWithRetry = async (options: any, maxRetries = 3, baseDelay = 1000): Promise<any> => {
						for (let attempt = 0; attempt <= maxRetries; attempt++) {
							try {
								return await this.helpers.request(options);
							} catch (error: any) {
								if (error.statusCode === 429 || (error.message && error.message.includes('429'))) {
									if (attempt < maxRetries) {
										let retryAfter = baseDelay;
										const retryMatch = error.message.match(/"retry_after":(\d+)/);
										if (retryMatch) {
											retryAfter = parseInt(retryMatch[1]) * 1000;
										}
										const delay = Math.min(retryAfter * (attempt + 1), 10000);
										await new Promise(resolve => (globalThis as any).setTimeout(resolve, delay));
										continue;
									}
								}
								throw error;
							}
						}
					};

					const response = await makeRequestWithRetry({
						method: 'GET',
						uri: 'https://app.famulor.de/api/user/assistants',
						headers: {
							'Authorization': `Bearer ${credentials.apiKey}`,
							'Content-Type': 'application/json',
						},
						json: true,
					});

					if (!Array.isArray(response)) {
						throw new NodeOperationError(this.getNode(), 'Invalid response format');
					}

					if (response.length === 0) {
						return [
							{
								name: 'No Assistants Found. Create One First.',
								value: '',
							},
						];
					}

					return response.map((assistant: any) => ({
						name: assistant.name,
						value: assistant.id,
					}));
				} catch (error) {
					throw new NodeOperationError(this.getNode(), `Failed to load assistants: ${error.message}`);
				}
			},
		},
	};

	async webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {
		const resource = this.getNodeParameter('resource', 0) as string;
		const operation = this.getNodeParameter('operation', 0) as string;

		if (resource === 'call' && operation === 'callEnded') {
			const bodyData = this.getBodyData();

			return {
				workflowData: [
					[
						{
							json: bodyData,
						},
					],
				],
			};
		}

		return {
			workflowData: [[]],
		};
	}
}
